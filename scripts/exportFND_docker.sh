#! /bin/bash

MYSQL_HOST="mysql-db";
DB="fnd";
TABLE="fndImport";
CVETYPE="";
DATE=$(date +%Y%m%d);

getType()
{
  SOURCE="/tmp/sourceType";

  mysql -h ${MYSQL_HOST} ${DB} -NB -e "SELECT DISTINCT source FROM ${TABLE};" > ${SOURCE};
  cat << EOF
[CVE Types]
-----------
EOF
  while read cve; do
    index=$(grep -n "^${cve}" ${SOURCE} | cut -d':' -f1);
    echo " - ${index}) ${cve}";
  done < ${SOURCE}
  while [[ -z ${CVETYPE} ]]; do
    echo -n "Choose your CVE type: ";
    read input;
    val=$(sed "${input}q;d" ${SOURCE});
    if [[ ${input} =~ ^[0-9]+$ && ! (-z ${val}) ]]; then
      CVETYPE=${val};
      echo "You have chosen ${CVETYPE}";
    else
      echo "Not a valid selection!";
    fi
  done && rm -rf ${SOURCE};
  exportData;
}

exportData()
{
  SOURCE="/tmp/source_data";
  CVE=$(echo ${CVETYPE} | sed "s/ //g");
  FILE="/snowcat/${DATE}_${CVE}.json";
  DESC="";
  FINDINGS="";
  REMEDIATION="";
  URL="";
  SYSID="";

  touch ${FILE};
  echo -ne "[\n{" > ${FILE};

  mysql -h ${MYSQL_HOST} ${DB} -NB -e "SELECT DISTINCT finding_id,bapp_id,tracking_id,app_reference,finding,remediation_plan FROM ${TABLE} WHERE source LIKE '${CVETYPE}';" | tr -d '\' > ${SOURCE};
  sed -i "s/\"/'/g" ${SOURCE};
  awk '{print $2}' ${SOURCE} | sort -u | while read line; do
    FND=($(grep "\t${line}\t" ${SOURCE} | awk '{print $1}'));
    APP=$(grep "\t${line}\t" ${SOURCE} | sed "s/\t/|/g" | cut -d'|' -f4 | uniq);
    REMEDIATION=$(grep "\t${line}\t" ${SOURCE} | sed "s/\t/|/g" | cut -d'|' -f6);
    FINDINGS=$(grep "\t${line}\t" ${SOURCE} | sed "s/\t/|/g" | cut -d'|' -f5);
    [[ ${#FND[@]} -gt 1 ]] && HANDLER="SR - ${APP} | ${line} | Multiple FNDs" || HANDLER="SR - ${APP} | ${line} | ${FND}";
    echo -e "\n  \"ShortDesc\": \"${HANDLER}\"," >> ${FILE};
    if [[ ${#FND[@]} -gt 1 ]]; then
      for fnd in "${!FND[@]}"; do
        SYSID=$(grep ${FND[$fnd]} ${SOURCE} | sed "s/\t/|/g" | cut -d'|' -f3);
        FINDINGS=$(grep ${FND[$fnd]} ${SOURCE} | sed "s/\t/|/g" | cut -d'|' -f5);
        REMEDIATION=$(grep ${FND[$fnd]} ${SOURCE} | sed "s/\t/|/g" | cut -d'|' -f6);
        [[ -z ${REMEDIATION} ]] && REMEDIATION=" ";
        URL="[REMOVED]";
        DESC="  \"Description${fnd}\": \"[${FND[$fnd]}][${URL}]\",\n  \"Findings${fnd}\": \"${FINDINGS}\",\n  \"Remediation${fnd}\": \"${REMEDIATION}\",";
        echo -e "${DESC}" >> ${FILE};
      done;
    else
      SYSID=$(grep ${line} ${SOURCE} | sed "s/\t/|/g" | cut -d'|' -f3 | uniq);
      URL="[REMOVED]";
      DESC="  \"Description\": \"[${FND}][${URL}]\",\n  \"Findings\": \"${FINDINGS}\",\n  \"Remediation\": \"${REMEDIATION}\",";
      echo -e "${DESC}" >> ${FILE};
    fi
    sed -i "$ s/.$//g" ${FILE};
    echo -ne "},\n{" >> ${FILE};
  done && rm -rf ${SOURCE};
  sed -i "$ s/.$//g" ${FILE} && sed -i "$ s/.$//g" ${FILE};
  echo -e "]" >> ${FILE};
  sed -i "s/\t/ /g" ${FILE} && sed -i "s/\r/ /g" ${FILE} && sed -i "s/\"\"/\"/g" ${FILE} && sed -i "s/\"Remediation\": \"$/\"Remediation\": \" \"\n/g" ${FILE};
  echo "Successfully create file: [ ${FILE} ]";
  echo -n "Would you like to automatically create RITMs for this file? [Y/N]: ";
  read input;
  if [[ $(echo ${input} | grep -Ei "^Y$") ]]; then
    echo "Creating RITMs...";
    cd ../snowcat;
    ./createFND ${FILE};
  else
    echo "Exiting...";
  fi
}


if [[ -z ${CVETYPE} ]]; then
  getType;
else
  exportData;
fi
